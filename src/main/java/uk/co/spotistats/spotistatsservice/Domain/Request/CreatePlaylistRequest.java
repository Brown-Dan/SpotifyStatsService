package uk.co.spotistats.spotistatsservice.Domain.Request;

import uk.co.spotistats.spotistatsservice.Domain.Model.StreamData;
import uk.co.spotistats.spotistatsservice.Domain.Request.Search.StreamingDataSearchRequest;
import uk.co.spotistats.spotistatsservice.Domain.Response.RecentTracks.RecentTrack;
import uk.co.spotistats.spotistatsservice.Domain.Response.Search.SearchResponseTrack;
import uk.co.spotistats.spotistatsservice.Domain.SpotifyAuth.SpotifyAuthData;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

import static uk.co.spotistats.spotistatsservice.Domain.Request.CreatePlaylistRequest.Builder.aCreatePlaylistRequest;

public record CreatePlaylistRequest(SpotifyAuthData authData, String name, String description, List<String> trackUris) {

    public static CreatePlaylistRequest fromRecentTracksSearchRequest(RecentTracksSearchRequest recentTracksSearchRequest, List<RecentTrack> streamData) {
        return aCreatePlaylistRequest()
                .withName("Recent songs - %s".formatted(LocalDate.now()))
                .withDescription("Autogenerated playlist for my most recent %s songs - created at - %s".formatted(recentTracksSearchRequest.limit(), LocalDateTime.now()))
                .withTrackUris(streamData.stream().map(RecentTrack::trackUri).toList())
                .withSpotifyAuthData(recentTracksSearchRequest.authData())
                .build();
    }

    public static CreatePlaylistRequest fromTopTracksSearchRequest(TopTracksSearchRequest searchRequest, List<StreamData> streamData) {
        return aCreatePlaylistRequest()
                .withName("Top songs @ %s".formatted(LocalDate.now()))
                .withDescription("Autogenerated playlist for my top %s songs - created at - %s".formatted(searchRequest.limit(), LocalDateTime.now()))
                .withTrackUris(streamData.stream().map(StreamData::trackUri).toList())
                .withSpotifyAuthData(searchRequest.authData())
                .build();
    }

    public static CreatePlaylistRequest fromStreamingDataSearchRequest(StreamingDataSearchRequest searchRequest, List<SearchResponseTrack> tracks, SpotifyAuthData spotifyAuthData) {
        return aCreatePlaylistRequest()
                .withName("Search request @ %s".formatted(LocalDate.now()))
                .withDescription("result of a spotify search request with the following filters - %s".formatted(searchRequest.toString()))
                .withTrackUris(tracks.stream().map(SearchResponseTrack::trackUri).toList())
                .withSpotifyAuthData(spotifyAuthData)
                .build();
    }

    public static final class Builder {
        private SpotifyAuthData spotifyAuthData;
        private String name;
        private String description;
        private List<String> trackUris;

        private Builder() {
        }

        public static Builder aCreatePlaylistRequest() {
            return new Builder();
        }

        public Builder withSpotifyAuthData(SpotifyAuthData spotifyAuthData) {
            this.spotifyAuthData = spotifyAuthData;
            return this;
        }

        public Builder withName(String name) {
            this.name = name;
            return this;
        }

        public Builder withDescription(String description) {
            this.description = description;
            return this;
        }

        public Builder withTrackUris(List<String> trackUris) {
            this.trackUris = trackUris;
            return this;
        }

        public CreatePlaylistRequest build() {
            return new CreatePlaylistRequest(spotifyAuthData, name, description, trackUris);
        }
    }
}
